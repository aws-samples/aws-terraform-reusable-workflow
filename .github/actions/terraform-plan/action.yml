name: "Terraform Plan"
description: "Terraform Plan Composite Action"
inputs:
  github-token:
    required: true
    description: "GitHub Repository Token"
  deploy:
    required: true
    description: "Desired state for the deployment. true=deploy | false=destroy"
  aws-region:
    required: true
    description: "AWS Region"
  environment:
    required: true
    description: "Environment Name"
  init-outcome:
    required: true
    description: "Terraform init command outcome"
  extra-args:
    required: false
    description: "Terraform plan command extra arguments"
outputs:
  exitcode:
    description: "Terraform Plan Exit code"
    value: ${{ steps.plan.outputs.exitcode }}
runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Terraform Format and style
      id: fmt
      continue-on-error: true
      shell: bash
      run: terraform fmt -check -diff -recursive
    - name: Terraform Validate
      id: validate
      continue-on-error: true
      shell: bash
      run: terraform validate -no-color
    - name: Define Terraform Plan Command # 'terraform plan' or 'terraform plan -destroy'
      id: tf_plan_command
      shell: bash
      run: |
        if ${{ inputs.deploy }}
        then
          echo "PLAN_COMMAND=terraform plan" >> $GITHUB_OUTPUT
        else
          echo "PLAN_COMMAND=terraform plan -destroy" >> $GITHUB_OUTPUT
        fi
    - name: Add extra arguments mask
      if: ${{ inputs.extra-args != '' }}
      shell: bash
      run: echo "::add-mask::${{ inputs.extra-args }}"
    - name: Terraform Plan
      id: plan
      continue-on-error: true
      shell: bash
      run: |
        ${{ steps.tf_plan_command.outputs.PLAN_COMMAND }} \
          -var-file=envs/${{ inputs.environment }}/terraform.tfvars \
          -var="region=${{ inputs.aws-region }}" \
          -var="environment=${{ inputs.environment }}" \
          -no-color \
          -detailed-exitcode \
          -input=false \
          ${{ inputs.extra-args }} | tee plan.out
    - name: Comment Pull Request
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      with:
        github-token: ${{ inputs.github-token }}
        script: |
          // 1. Retrieve existing bot comments for the PR
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          })
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes('${{ github.workflow }} ${{ inputs.environment }}')
          })

          // 2. Prepare format of the comment
          const run_url = process.env.GITHUB_SERVER_URL + '/' + process.env.GITHUB_REPOSITORY + '/actions/runs/' + process.env.GITHUB_RUN_ID
          const run_link = '<a href="' + run_url + '">Actions</a>.'
          const fs = require('fs')
          const plan_file = fs.readFileSync('plan.out', 'utf8')
          const plan = plan_file.length > 65000 ? plan_file.toString().substring(0, 65000) + " ..." : plan_file
          const truncated_message = plan_file.length > 65000 ? "Output is too long and was truncated. You can read full Plan in " + run_link + "<br /><br />" : ""

          const output = `## ${{ github.workflow }} - ${{ inputs.environment }}
          #### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ inputs.init-outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>

          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          \`\`\`

          </details>

          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${plan}
          \`\`\`

          </details>
          ${truncated_message}

          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ github.workspace }}\`, Workflow: \`${{ github.workflow }} ${{ inputs.environment }}\`*`;

          // 3. If we have a comment, update it, otherwise create a new one
          if (botComment) {
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: output
            })
          } else {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          }
    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      shell: bash
      run: exit 1
